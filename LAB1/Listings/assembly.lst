


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           asm_math
    3 00000000         
    4 00000000         ; function asm_math
    5 00000000         ; inputs:
    6 00000000         ; -------
    7 00000000         ; R0: input array of FIR values
    8 00000000         ; R1: output array containing RMS, max/min value/index
    9 00000000         ; R2: input array length
   10 00000000         
   11 00000000         ; R3: counter value i
   12 00000000         ; R4: RMS value
   13 00000000         
   14 00000000         ; S0: intermediate RMS register
   15 00000000         ; S1: max value
   16 00000000         ; S2: min value
   17 00000000         ; S3: input array length
   18 00000000         ; S4: RMS value
   19 00000000         ; S5: max index
   20 00000000         ; S6: min index
   21 00000000         
   22 00000000         asm_math
   23 00000000         
   24 00000000 B510            PUSH{R4,         LR}
   25 00000002         
   26 00000002 F04F 0300       LDR              R3, =0      ;initialize int i t
                                                            o 0
   27 00000006 F04F 0400       LDR              R4, =0      ;initalize rms valu
                                                            e to 0
   28 0000000A         
   29 0000000A EDD0 0A00       VLDR.f32         S1, [R0]    ;initialize max val
                                                            ue output
   30 0000000E ED90 1A00       VLDR.f32         S2, [R0]    ;initialize min val
                                                            ue output
   31 00000012 EE01 2A90       FMSR             S3, R2      ;save length of arr
                                                            ay into FP register
                                                            
   32 00000016 EEF8 1AE1       FSITOS           S3, S3      ;convert int to FP
   33 0000001A         
   34 0000001A         loop
   35 0000001A         
   36 0000001A EB00 0483       ADD              R4, R0, R3, LSL #2 ; access inp
                                                            utVector[i] by shif
                                                            ting 2^i bytes on b
                                                            ase address
   37 0000001E ED94 0A00       VLDR.f32         S0, [R4]
   38 00000022         ;RMS calculation
   39 00000022 EEA0 2A00       VFMA.f32         S4, S0, S0  ;square input value
                                                             and add to sum
   40 00000026         
   41 00000026 2B01            CMP              R3, #1      ;compare i with 1 t
                                                            o determine if it i
                                                            s in first index
   42 00000028 F103 0301       ADD              R3, #1
   43 0000002C DBF5            BLT              loop        ;if in first index,
                                                             branch to loop
   44 0000002E         ;only reach here if after first iteration
   45 0000002E         
   46 0000002E F1A3 0301       SUB              R3, #1      ;de-increment the i



ARM Macro Assembler    Page 2 


                                                             value by 1
   47 00000032         
   48 00000032 EEB4 0A41       VCMP.f32         S0, S2      ;compare the curren
                                                            t index with the mi
                                                            n
   49 00000036 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; ;check FP fl
                                                            ag for branching
   50 0000003A         ;BLLT min_loop
   51 0000003A BFBC EEB0 
              1A40             VMOVLT.f32       S2, S0      ;save min value int
                                                            o register
   52 00000040 EE03 3A10       FMSRLT           S6, R3      ;save min index int
                                                            o register
   53 00000044 EEB8 3AC3       FSITOS           S6, S6      ;convert int to FP
   54 00000048         
   55 00000048         
   56 00000048 EEB4 0A60       VCMP.f32         S0, S1      ;compare the curren
                                                            t index with the ma
                                                            x
   57 0000004C EEF1 FA10       VMRS             APSR_nzcv, FPSCR ;check FP flag
                                                             for branching
   58 00000050         ;BLGT max_loop
   59 00000050 BFC4 EEF0 
              0A40             VMOVGT.f32       S1, S0      ;save max value int
                                                            o register
   60 00000056 EE02 3A90       FMSRGT           S5, R3      ;save max index int
                                                            o register
   61 0000005A EEF8 2AE2       FSITOS           S5, S5      ;convert int to FP
   62 0000005E         
   63 0000005E F103 0301       ADD              R3, #1
   64 00000062 4293            CMP              R3, R2      ;compare i to the l
                                                            ength of the input 
                                                            array
   65 00000064 DBD9            BLT              loop        ;if i is less than 
                                                            length, re-loop
   66 00000066         
   67 00000066 EE82 2A21       VDIV.f32         S4, S4, S3  ;divide sum of squa
                                                            res by the length o
                                                            f array
   68 0000006A EEB1 2AC2       VSQRT.f32        S4, S4
   69 0000006E         
   70 0000006E         ;store in output array
   71 0000006E ED81 2A00       VSTR.f32         S4, [R1, #0]
   72 00000072 EDC1 0A01       VSTR.f32         S1, [R1, #4]
   73 00000076 EDC1 2A02       VSTR.f32         S5, [R1, #8]
   74 0000007A ED81 1A03       VSTR.f32         S2, [R1, #12]
   75 0000007E ED81 3A04       VSTR.f32         S6, [R1, #16]
   76 00000082 E8BD 4010       POP{R4,          LR}
   77 00000086 4770            BX               LR
   78 00000088         
   79 00000088                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\assembly.d -o.\objects\assembly.o -I.\RTE\_Target_1 -
IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\S
TM32F4xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EVA
L SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" -
-predefine="STM32F407xx SETA 1" --list=.\listings\assembly.lst Assembly.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

asm_math 00000000

Symbol: asm_math
   Definitions
      At line 22 in file Assembly.s
   Uses
      At line 2 in file Assembly.s
Comment: asm_math used once
loop 0000001A

Symbol: loop
   Definitions
      At line 34 in file Assembly.s
   Uses
      At line 43 in file Assembly.s
      At line 65 in file Assembly.s

text 00000000

Symbol: text
   Definitions
      At line 1 in file Assembly.s
   Uses
      None
Comment: text unused
3 symbols
338 symbols in table
